{"version":3,"sources":["serviceWorker.js","containers/constants.js","containers/reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/actions.js","api/api.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","name","email","id","username","className","alt","src","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","state","hasError","errorInfo","this","setState","console","log","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","disPatch","event","target","value","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8fca00b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n \r\n const initialStateSearch = {\r\n \tsearchField: '',\r\n \t\r\n }\r\n\r\n\r\n export const searchRobots = (state=initialStateSearch, action={}) => {\r\n \tswitch(action.type){\r\n \t\tcase CHANGE_SEARCH_FIELD:\r\n \t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n \t\t\t// return {...state, searchField: action.payload};\r\n \t\tdefault:\r\n \t\t\treturn state;\r\n \t}\r\n };\r\n\r\n const initialStateRobots = {\r\n \trobots: [],\r\n \tisPending: false,\r\n \terror: ''\r\n }\r\n\r\n export const requestRobots = (state=initialStateRobots, action={}) => {\r\n \tswitch(action.type){\r\n \t\tcase REQUEST_ROBOTS_PENDING:\r\n \t\t\treturn Object.assign({}, state, {isPending: true});\r\n \t\tcase REQUEST_ROBOTS_SUCCESS:\r\n \t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n \t\tcase REQUEST_ROBOTS_FAILED:\r\n \t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n \t\tdefault:\r\n \t\t\treturn state;\r\n \t}\r\n }","import React, {Fragment } from 'react';\r\n\r\nconst Card = ({name, email, id, username}) => {\r\n\t// const {name, email, id} = props;\r\n\r\n\treturn(\r\n\t\t<Fragment>\r\n\t\t\t<div className=\"tc bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t\t<h3>{username}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// if (true){\r\n\t// \tthrow new Error('Ooooh my gosh');\r\n\t// }\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user,i) => \r\n\t\t \t\t\t<Card key={robots[i].id} \r\n\t\t\t \t\t\tid={robots[i].id} \r\n\t\t\t \t\t\tname={robots[i].name} \r\n\t\t\t \t\t\temail={robots[i].email} \r\n\t\t\t \t\t\tusername={robots[i].username}\r\n\t\t \t\t\t/>\r\n\t\t \t\t)}\r\n\t \t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input type=\"search\" \r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow:'auto', height: \"800px\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tstatic getDerivedStateFromError(error) {\r\n    // 更新 state 以至於下一個 render 會顯示 fallback UI\r\n    \treturn { hasError: true };\r\n  \t}\r\n\r\n\tcomponentDidCatch(error, errorInfo){\r\n\t\t// 你也可以把錯誤記錄到一個錯誤回報系統服務logErrorToMyService(error, errorInfo);\r\n\t\tthis.setState({hasError:true});\r\n    \tconsole.log(error, errorInfo);\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1>Something went wrong,</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import {CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nimport {apiCall} from '../api/api';\r\n\r\nexport const setSearchfield = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tapiCall('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n \t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n};","export const apiCall = (link) => fetch(link).then(response => response.json())","import React, {Fragment, Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchfield, requestRobots} from './actions';\r\n\r\nconst mapStateToProps = (state) =>{//reducer's state object save into props via connect\r\n\treturn {\r\n\t\t// searchField: state.searchField, //only single reducer use state.searchField\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (disPatch) => {//disPatch action function as parameter into reducer function\r\n\t//and save into props\r\n\treturn {\r\n\t\tonSearchChange: (event) => disPatch(setSearchfield(event.target.value)),\r\n\t\tonRequestRobots: () => disPatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState({searchfield: event.target.value});\r\n\t// }\r\n\r\n\trender(){\r\n\t\t// const { robots } = this.state; \r\n\t\tconst { searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filterRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\r\n\t\t return isPending ?\r\n\t\t \t <h1>Loading</h1> :\t\r\n\t\t \t(\r\n\t\t\t \t<Fragment>\r\n\t\t\t\t \t<div className=\"tc\">\r\n\t\t\t\t\t \t<h1 className=\"f1\">Robot friends</h1>\r\n\t\t\t\t\t \t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t \t<Scroll>\r\n\t\t\t\t\t \t\t<ErrorBoundry>\r\n\t\t\t\t\t \t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t \t\t</ErrorBoundry>\r\n\t\t\t\t\t \t</Scroll>\r\n\t\t\t\t\t</div>\r\n\t\t\t \t</Fragment>\r\n \t\t\t);\r\n\t}\r\n \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './containers/reducers';\nimport 'tachyons';\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));//store store reducer and let provider apply to connect\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}